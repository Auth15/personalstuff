-- // services
local Workspace = game:GetService("Workspace"); 
local Players = game:GetService("Players"); 

local RunService = game:GetService("RunService"); 
local UserInputService = game:GetService("UserInputService");
local VRService = game:GetService("VRService"); 

game:GetService("StarterGui"):SetCore("VRLaserPointerMode", 0);
game:GetService("StarterGui"):SetCore("VREnableControllerModels", false);

VRService.FadeOutViewOnCollision = false

-- // constants
local Player = Players.LocalPlayer
local CurrentCamera = Workspace.CurrentCamera

local ServerEndpoint = Player.Backpack:FindFirstChild("ServerEndpoint", true); 

CurrentCamera.CameraType = Enum.CameraType.Scriptable
CurrentCamera.HeadScale = 15

-- // functions 
local PerformAction = function(ActionName, ...)
	return ServerEndpoint:InvokeServer(ActionName, ...); 
end 

local CreateLimb = function(Properties, Parent)
	local Limb = PerformAction("CreatePart", "Normal", CFrame.new(0,0,0), Parent); 
	
	Limb.CanCollide = false
	Limb:GetPropertyChangedSignal("CanCollide"):Connect(function()
		Limb.CanCollide = false
	end); 

	local PatchedProperties = {} 
	for PropName, PropValue in next, Properties do 
		if PropName == "Textures" and typeof(PropValue) == "table" then
			task.spawn(function()
				for _, Data in ipairs(PropValue) do 
					Data.Part = Limb
				end

				PerformAction("CreateTextures", PropValue); PerformAction("SyncTexture", PropValue); 
			end); 
		elseif PropName == "Meshes" and typeof(PropValue) == "table" then
			task.spawn(function()
				for _, Data in ipairs(PropValue) do 
					Data.Part = Limb
				end

				PerformAction("CreateMeshes", PropValue); PerformAction("SyncMesh", PropValue); 
			end); 
		else
			PatchedProperties[PropName .. "\0"] = PropValue
		end
	end

	task.spawn(function()
		PerformAction("SyncSurface", {
			{
				Part = Limb,
				Surfaces = PatchedProperties
			}
		})
	end);

	return Limb 
end 

-- // create limbs
local Character = Player.Character
local Head = Character:FindFirstChild("Head"); 
local Humanoid = Character:FindFirstChild("Humanoid"); 

local LArm = Character:FindFirstChild("Left Arm");
local RArm = Character:FindFirstChild("Right Arm"); 

local Head = CreateLimb({ Name = "Head", CanCollide = false, Size = Vector3.new(1,1,1) * (CurrentCamera.HeadScale*0.4), CollisionGroup = "Default", Color = Head.Color, Textures = { {TextureType = "Decal", Face = Enum.NormalId.Front, Texture = Head.face.Texture, Transparency = 0} }, Meshes = {{ MeshType = Enum.MeshType.Head, Scale = Vector3.new(1,1,1) * (CurrentCamera.HeadScale*0.5) }} }, Character); 
local RHand, LHand = CreateLimb({ Name = "RHand", CanCollide = true, Size = Vector3.new(2,1,1) * (CurrentCamera.HeadScale*0.5), CollisionGroup = "Default", Color = RArm.Color }, Character), CreateLimb({ Name = "LHand", CanCollide = true, Size = Vector3.new(2,1,1) * (CurrentCamera.HeadScale*0.5), CollisionGroup = "Default", Color = LArm.Color }, Character); 

RHand.Transparency = .5
Head.Transparency = 1
LHand.Transparency = .5

local RHandOffset = Vector3.new(0,90,0);
local LHandOffset = Vector3.new(0,90,0);

-- // update
local ThumbstickInput1 = Vector2.zero
local ThumbstickInput2 = Vector2.zero 

UserInputService.InputEnded:Connect(function(Input, Processed)
	print(("InputEnded | UIT: %s | Keycode: %s"):format(Input.UserInputType.Name, Input.KeyCode.Name))

	if Input.UserInputType == Enum.UserInputType.Gamepad1 and Input.KeyCode == Enum.KeyCode.Thumbstick2 then
		ThumbstickInput2 = Vector2.zero
	end

	if Input.UserInputType == Enum.UserInputType.Gamepad1 and Input.KeyCode == Enum.KeyCode.Thumbstick1 then
		ThumbstickInput1 = Vector2.zero
	end
end); 

UserInputService.InputChanged:Connect(function(Input)
	print(("InputChanged | UIT: %s | Keycode: %s"):format(Input.UserInputType.Name, Input.KeyCode.Name))

	if Input.UserInputType == Enum.UserInputType.Gamepad1 and Input.KeyCode == Enum.KeyCode.Thumbstick2 then
		ThumbstickInput2 = Input.Position
	end

	if Input.UserInputType == Enum.UserInputType.Gamepad1 and Input.KeyCode == Enum.KeyCode.Thumbstick1 then
		ThumbstickInput1 = Input.Position 
	end
end); 

RunService.Heartbeat:Connect(function()
	local HeadCF = VRService:GetUserCFrame(Enum.UserCFrame.Head); 
	local LArmCF, RArmCF = VRService:GetUserCFrame(Enum.UserCFrame.LeftHand), VRService:GetUserCFrame(Enum.UserCFrame.RightHand); 

	PerformAction("SyncSurface", {
		{
			Part = Head,
			Surfaces = {
				["Anchored\0"] = true,
				["CFrame\0"] = CurrentCamera.CFrame*(CFrame.new(HeadCF.p*(CurrentCamera.HeadScale-1))*HeadCF)
			}
		},

		{
			Part = LHand,
			Surfaces = {
				["Anchored\0"] = true,
				["CFrame\0"] = CurrentCamera.CFrame*(CFrame.new(LArmCF.p*(CurrentCamera.HeadScale-1))*LArmCF*CFrame.Angles(math.rad(LHandOffset.X),math.rad(LHandOffset.Y),math.rad(LHandOffset.Z)))
			}
		},

		{
			Part = RHand,
			Surfaces = {
				["Anchored\0"] = true,
				["CFrame\0"] = CurrentCamera.CFrame*(CFrame.new(RArmCF.p*(CurrentCamera.HeadScale-1))*RArmCF*CFrame.Angles(math.rad(RHandOffset.X),math.rad(RHandOffset.Y),math.rad(RHandOffset.Z)))
			}
		}
	});
end); 

local RotationOffset = Vector3.new(180,180,0);
RunService.RenderStepped:Connect(function()
	if ThumbstickInput1.Magnitude > 0.15 then
		local MoveDir = CurrentCamera.CFrame.LookVector * ThumbstickInput1.Y
	        CurrentCamera.CFrame = CurrentCamera.CFrame:Lerp(
	            CurrentCamera.CFrame + MoveDir * CurrentCamera.HeadScale * 0.5,
	            0.5
	        );
	end

	if ThumbstickInput2.Magnitude > 0.15 then
		if math.abs(ThumbstickInput2.Y) > math.abs(ThumbstickInput2.X) then
			CurrentCamera.CFrame = CurrentCamera.CFrame * CFrame.new(0, ThumbstickInput2.Y * CurrentCamera.HeadScale * 0.25, 0)
		else
			local Yaw = -ThumbstickInput2.X * 2.5
			CurrentCamera.CFrame = CurrentCamera.CFrame * CFrame.Angles(0, math.rad(Yaw), 0)
		end
	end
end);
