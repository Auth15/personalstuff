local Players = game:GetService("Players"); 
local RunService = game:GetService("RunService");
local VRService = game:GetService("VRService");

local LP = Players.LocalPlayer
local CurrentCamera = workspace.CurrentCamera 

local SyncAPI = LP.Backpack:FindFirstChild("SyncAPI", true); 
local ServerEndpoint = SyncAPI.ServerEndpoint

local HelperFuncs, SyncModule = {}, require(SyncAPI.SyncModule); 

LP.Character.UpperTorso:ClearAllChildren(); 
LP.Character.LowerTorso:Destroy(); 

HelperFuncs.PerformAction_Server = function(ActionName, ...)
      return ServerEndpoint:InvokeServer(ActionName, ...); 
end 

HelperFuncs.PerformAction_Client = function(ActionName, ...)
      return SyncModule.PerformAction(LP, ActionName, ...); 
end 

local LHand = HelperFuncs.PerformAction_Server("CreatePart", "Normal", CFrame.new(), LP.Character); 
local RHand = HelperFuncs.PerformAction_Server("CreatePart", "Normal", CFrame.new(), LP.Character); 

local Head = HelperFuncs.PerformAction_Server("CreatePart", "Normal", CFrame.new(), LP.Character);

RunService.RenderStepped:Connect(function()
      local LHandOffset = CurrentCamera.CFrame * VRService:GetUserCFrame(Enum.UserCFrame.LeftHand); 
      local RHandOffset = CurrentCamera.CFrame * VRService:GetUserCFrame(Enum.UserCFrame.RightHand);

      local Changes = {
		{
			Part = LHand,
			Anchored = false,
			CFrame = LHandOffset * LHandOffset.Rotation + Vector3.new(LHandOffset.Position,0,-3.5);
		},
		{
			Part = RHand,
			Anchored = false,
			CFrame = RHandOffset * RHandOffset.Rotation + Vector3.new(RHandOffset.Position,0,-3.5);
		}
	}
      HelperFuncs.PerformAction_Server("SyncMove", Changes); 
end); 

